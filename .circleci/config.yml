version: 2.1

orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Build Front End
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail 
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm i
      - run:
          name: Build Back End
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail 
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-test
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      - slack/notify:
          event: fail 
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-test
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Test backend
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
      - slack/notify:
          event: fail 
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-scan
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      - slack/notify:
          event: fail 
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-scan
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
      - slack/notify:
          event: fail 
          template: basic_fail_1

  custom-slack-notifications:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/status:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Build $CIRCLE_BUILD_NUM Failed for \n<$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git 
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip jq npm 
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            EC2_url=$(aws ec2 describe-instances --region ap-south-1 --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name, Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text )
            echo "EC2_url=$EC2_url"
            echo "Workflow ID=${CIRCLE_WORKFLOW_ID:0:7}"
            curl -H "Content-Type: text/plain" -H "token: cb217923-dfdf-4461-ad7e-1211c8a6f80f" \
              --request PUT --data "$EC2_url" https://api.memstash.io/values/myEC2url_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            S3ARN=$(aws s3 ls | grep udapeople)
            echo "S3ARN=$S3ARN"
            echo "Workflow ID=${CIRCLE_WORKFLOW_ID:0:7}"
            curl -H "Content-Type: text/plain" -H "token: cb217923-dfdf-4461-ad7e-1211c8a6f80f" \
              --request PUT --data "$S3ARN" https://api.memstash.io/values/myS3SRN_${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here 
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name, Values=Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt 

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git 
      - checkout
      # Add ssh keys with fingerprint 
      - add_ssh_keys:
          fingerprints: 
            - "I47:ef:5a:b5:a8:3f:ca:57:7e:39:ec:27:70:96:88:1b"
      # attach workspace 
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar
      - run:
          name: Configure server
          command: |
            # Your code here
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      
      
  run-migrations:
    docker:
      # Docker image here that supports NodeJS 
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git 
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend

            echo ENVIRONMENT=production > .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env

            cat .env

            npm install 
            npm install typescript

            echo "Host - " $TYPEORM_HOST
            echo "Password - " $TYPEORM_PASSWORD
            echo $TYPEORM_DATABASE

            npm run migrations:revert

            touch ./migrations.txt 
            npm run migrations >> ./migrations.txt
            cat ./migrations.txt 

      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            # Your code here
            if grep "has been executed successfully" ./migrations.txt
            then
            # curl -H "Content-Type: text/plain" -H "token: cb217923-dfdf-4461-ad7e-1211c8a6f80f" --request PUT --data "1" https://api.memstash.io/values/MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}
              curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_Token" --request PUT --data "Migration Success" https://api.memstash.io/values/MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}
            else
            # curl -H "Content-Type: text/plain" -H "token: cb217923-dfdf-4461-ad7e-1211c8a6f80f" --request PUT --data "0" https://api.memstash.io/values/MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}
              curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_Token" --request PUT --data "Migration Failure" https://api.memstash.io/values/MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}
            fi 

            echo "MIGRATION_STATUS_${CIRCLE_WORKFLOW_ID:0:7}"
            echo "$MEMSTASH_Token"

            echo "Note - Not able to locate the token on memstash.io - Work on it later on"

     # Here's where you will add some code to rollback on failure      
     
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git 
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip jq npm

      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP = aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name, Values=Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "${API_URL}" >> "frontend/.env"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            npm run build

            aws s3 mb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --region ap-south-1
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}

            aws s3 ls s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}

            echo "S3 bucket name - s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
     
workflows:
  default:
    jobs:
      # - build-frontend:
      #     context: slack-secrets
      # - build-backend 
      # - test-frontend:
      #     requires: 
      #       - build-frontend
      # - test-backend:
      #     requires: 
      #       - build-backend
      # - scan-frontend:
      #     requires: 
      #       - test-frontend
      # - scan-backend:
      #     requires: 
      #       - test-backend 
      # - deploy-infrastructure
      # - configure-infrastructure:
      #       requires: 
      #         - deploy-infrastructure
      # - run-migrations
      - deploy-frontend
      #      requires: 
      #        - configure-infrastructure

