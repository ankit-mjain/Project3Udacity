version: 2.1

orbs:
  slack: circleci/slack@4.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-build
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Build Front End
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail 
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-build
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm i
      - run:
          name: Build Back End
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail 
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-test
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      - slack/notify:
          event: fail 
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-test
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Test backend
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
      - slack/notify:
          event: fail 
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: frontend-scan
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      - slack/notify:
          event: fail 
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: backend-scan
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
      - slack/notify:
          event: fail 
          template: basic_fail_1

  custom-slack-notifications:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/status:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "Build $CIRCLE_BUILD_NUM Failed for \n<$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git 
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "Udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            ec2_url=$(aws ec2 describe-instances --region ap-south-1 --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name, Values=Udapeople-backend-${CIRCLE_WORKFLOW_ID}" --output text )
            echo "ec2_url=$ec2_url"
            echo "Workflow ID=${CIRCLE_WORKFLOW_ID:0:7}"
            curl -H "Content-Type: text/plain" -H "token: cb217923-dfdf-4461-ad7e-1211c8a6f80f" \
              --request PUT --data "$ec2_url" https://api.memstash.io/values/myec2_url_${CIRCLE_WORKFLOW_ID:0:7}
            exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "Udapeople-frontend-khviah93rhnf"
              --parameter-overrides ID="khviah93rhnf"
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here 
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name, Values=Udapeople-backend-${CIRCLE_WORKFLOW_ID}" --output text )
              --output text >> .circleci/ansible/inventory.txt
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

workflows:
  default:
    jobs:
      # - build-frontend:
      #     context: slack-secrets
      # - build-backend 
      # - test-frontend:
      #     requires: 
      #       - build-frontend
      # - test-backend:
      #     requires: 
      #       - build-backend
      # - scan-frontend:
      #     requires: 
      #       - test-frontend
      # - scan-backend:
      #     requires: 
      #       - test-backend 
      - deploy-infrastructure
